/**
 * Original concept generated by v0 by Vercel.
 * @see https://v0.dev/t/FiptNXNSTOU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

// Styling Imports
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { SearchIcon, ClockIcon, LoadingIcon } from "@/assets/Icons"

// React Functionality Imports
import { useState, useRef } from 'react'
import ReactPlayer from 'react-player'
import { useForm } from "react-hook-form"

// Context Management Imports
import { useNBDeleteChunks, useNBUpdateChunks } from "@/services/NBChunksProvider"
import { useNewUpdatedAt } from "@/services/NBTimestampsProvider"

// Type Definition Imports
import { CHUNK_TYPES, EDIT_TYPES, VideoChunkJSON, VideoChunkProps } from "@/constants/ChunkTypes"
import { ChunkOptions } from "../ChunkOptions"

// Component Imports
import { EditVideoChunk } from "./EditVideoChunk"
import { SearchBar } from "@/components/composables/SearchBar"

// API Imports
import { LectureAPI } from "@/apis/LectureAPI"
import { TimestampJSON, lectForm, lectSchema } from "@/constants/APITypes"
import { zodResolver } from "@hookform/resolvers/zod"


export const VideoChunk: React.FC<VideoChunkProps> = ({ order, url, title, description }) => {
    // Context Services
    const updateChunk = useNBUpdateChunks()


    // Component Specific React Management
    const videoRef = useRef<ReactPlayer | null>(null);
    const [loadingState, setLoadingState] = useState(false)
    const [clips, setClips] = useState<TimestampJSON[]>([])
    const [inputQuery, setInputQuery] = useState("")
    const [validVideo, setValidVideo] = useState(true)

    // const handleDelete = () => {
    //     deleteChunk(order);
    // }

    // Lecture Upload Functionality
    const form = useForm<lectForm>({
        resolver: zodResolver(lectSchema),
        defaultValues: {
            new_title: title,
            new_description: description,
            new_url: url,
        },
    })

    async function onUpdate(values: lectForm) {
        console.log("CURRENT URL:", url)
        console.log("NEW URL:", values.new_url)
        if (values.new_title !== title) {
            console.log(values.new_title)
        }

        if (values.new_description !== description) {
            console.log(values.new_description)
        }

        if (values.new_url !== url) {
            try {
                const cleanStatus = await LectureAPI.cleanLecture(url);
                console.log("Clean Lecture Response:", cleanStatus);
            } catch (error) {
                console.log(error)
                return;
            }
            setLoadingState(true);

            const updatedChunk: VideoChunkJSON = {
                'type': CHUNK_TYPES.VIDEO,
                'order': order,
                'url': values.new_url,
                'title': values.new_title,
                'description': values.new_description
            }

            updateChunk(updatedChunk);
            setClips([])
            setInputQuery("")
            try {
                const title = await LectureAPI.postLecture(values.new_url);
                setLoadingState(false)
                if (title == null) {
                    setValidVideo(true)
                } else {
                    setValidVideo(false)
                }
            } catch (error) {
                console.log(error)
                return;
            }
        }
    }

    // Lecture Search Functionality
    const handleSearch = async () => {
        await setLoadingState(true)
        if (inputQuery) {
            const newClips = await LectureAPI.queryLecture(inputQuery)
            newClips.sort((a:TimestampJSON, b:TimestampJSON) => { return a.seconds - b.seconds })
            await setClips(newClips)
        }
        setLoadingState(false)
    }

    const setTimeStamp = (seconds: number) => {
        if (videoRef.current) {
            const internalPlayer = videoRef.current.getInternalPlayer();
            if (internalPlayer && internalPlayer.seekTo && internalPlayer.playVideo) {
                internalPlayer.seekTo(seconds, true);
                internalPlayer.playVideo();
            }
        }
    };


    const handleDeleteClick = () => {

    };

    return (
        <Card className="w-full max-w-3xl">
            <CardHeader className="grid grid-cols-[1fr_auto] items-start gap-4">
                <div className="space-y-2">
                    <CardTitle>Title</CardTitle>
                    <CardDescription>A step-by-step guide on building a React application from scratch.</CardDescription>
                </div>
                <EditVideoChunk
                    title={"Title"}
                    description={"description"}
                    url={url}
                    onUpdate={onUpdate}
                    form={form}
                >
                    <ChunkOptions
                        onEditClick={() => { }}
                        onDeleteClick={handleDeleteClick}
                        editType={EDIT_TYPES.dialog}
                    />
                </EditVideoChunk>
            </CardHeader>
            <CardContent>
                <div className="grid gap-6">
                    <div className="relative rounded-lg overflow-hidden aspect-video">
                        {url.length > 0 ?
                            <ReactPlayer
                                ref={videoRef}
                                url={url}
                                width='100%'
                                height='100%'
                                className='react-player'
                                controls={true}
                            />
                            :
                            <video
                                className="w-full h-full object-cover"
                                src="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"
                                controls
                            />
                        }
                    </div>
                    <div className="grid gap-4">
                        <div className="flex items-center gap-2">
                            <SearchBar
                                inputQuery = {inputQuery}
                                setInputQuery={setInputQuery}
                                placeholder="Search lecture..."
                                style=""
                            />
                            {loadingState ?
                                <Button variant="ghost">
                                    <LoadingIcon className="w-5 h-5 animate-spin" />
                                </Button>
                                :
                                <Button
                                    variant="ghost"
                                    onClick={handleSearch}
                                >
                                    <SearchIcon className="w-5 h-5" />
                                </Button>
                            }
                        </div>
                        <div className="grid gap-2">
                            <div className="grid">
                                {
                                    clips.map(clip => {
                                        return (
                                            <button
                                                className="flex justify-start items-center gap-2 text-sm cursor-pointer px-2 py-1 border-l-2 hover:border-l-4 hover:py-2 duration-500 hover:font-bold hover:text-blue-500 hover:border-blue-500"
                                                onClick={() => setTimeStamp(clip.seconds)}
                                            >
                                                <ClockIcon className="w-4 h-4" />
                                                {clip.label}
                                                <div className="line-clamp-1">
                                                    {clip.content}
                                                </div>
                                            </button>
                                        )
                                    })
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}